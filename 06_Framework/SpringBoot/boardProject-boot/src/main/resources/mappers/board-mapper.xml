<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- 연결할 인터페이스의 패키지명.인터페이스명을 작성 -->
<mapper namespace="edu.kh.project.board.model.mapper.BoardMapper">

	<!-- resultMap 태그
		1) 조회 된 데이터의 컬럼명과 DTO 필드명이 일치하지 않을때
		이를 매핑 시키는 용도
		
		2) resultMap 사용 시 다른 SELECT 구문을 추가로 수행하고 싶을 때
	-->
	<resultMap id="board_rm" type="Board">
		
		<id property="boardNo" column="BOARD_NO" />
		
	<!-- collection 태그
		select로 조회된 결과를 컬렉션(List)에 담아
		지정된 필드에 세팅
         
		property : List를 담을 DTO의 필드명
		select : 실행할 select의 id
		column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
		javaType : List(컬렉션)의 타입을 지정
		ofType : List(컬렉션)의 제네릭(타입 제한) 지정
	-->
	
		<collection property="commentList" select="selectCommentList"
					column="BOARD_NO" javaType="java.util.ArrayList" 
					ofType="Comment" />
					
		<collection property="imageList" 
               select="selectImageList" 
               column="BOARD_NO"
               javaType="java.util.ArrayList"
               ofType="BoardImg" />
	</resultMap>





	<!-- CDATA 태그 : 태그 내부에 작성된 모든 문자는 단순 문자로 취급-->
	
	<!-- 전체 게시글 수 조회-->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		WHERE BOARD_CODE = #{boardCode}
		AND BOARD_DEL_FL = 'N'
	</select>

	<!-- 게시글 목록 조회 -->
	<select id="selectBoardList" resultType="Board">
		SELECT BOARD_NO, BOARD_TITLE, READ_COUNT, MEMBER_NICKNAME,
		
			<![CDATA[ 
				CASE  
			         WHEN SYSDATE - BOARD_WRITE_DATE < 1/24/60
			         THEN FLOOR( (SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
			         WHEN SYSDATE - BOARD_WRITE_DATE < 1/24
			         THEN FLOOR( (SYSDATE - BOARD_WRITE_DATE) * 24 * 60) || '분 전'
			         WHEN SYSDATE - BOARD_WRITE_DATE < 1
			         THEN FLOOR( (SYSDATE - BOARD_WRITE_DATE) * 24) || '시간 전'
			         ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
			    END BOARD_WRITE_DATE,
		    ]]>
		    
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
			(SELECT COUNT(*) FROM "BOARD_LIKE" L
			 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
			(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
			 WHERE I.BOARD_NO = B.BOARD_NO
			 AND IMG_ORDER = 0) THUMBNAIL      
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		ORDER BY BOARD_NO DESC
	</select>
	
	<!-- if 태그(동적 SQL)-->
	<!--
		- if문 나타내는 태그
		- 조건문은 test 속성에 작성
		- 조건문에서 문자열은 ""로 표기하도록 한다!
		- 별도의 else 제공하지 않음(단일 if문)
	-->
	
	<!-- choose 태그(동적 SQL) -->
	<!--
		- if ~ else if ~ else 형태의 태그
		- choose, when, otherwise 태그 존재
	-->
	
	<!-- 검색어 일치 게시글 수 조회-->
	<select id="searchListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		<!--작성자 검색일 경우 MEMBER 테이블 JOIN-->
		<if test='key == "w"'>
			JOIN "MEMBER" USING(MEMBER_NO)
		</if>
		WHERE BOARD_CODE = #{boardCode}
		AND BOARD_DEL_FL = 'N'
		
		<choose>
			<!--제목검색-->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			<!--내용검색-->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			<!--제목+내용-->
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
			<!--작성자검색-->
			<when test='key == "w"'>
				AND MEMBER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>
	</select>

	<!-- 검색어 일치 게시글 목록 조회 -->
	<select id="searchBoardList" resultType="Board">
		SELECT BOARD_NO, BOARD_TITLE, READ_COUNT, MEMBER_NICKNAME,
		
			<![CDATA[ 
				CASE  
			         WHEN SYSDATE - BOARD_WRITE_DATE < 1/24/60
			         THEN FLOOR( (SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
			         WHEN SYSDATE - BOARD_WRITE_DATE < 1/24
			         THEN FLOOR( (SYSDATE - BOARD_WRITE_DATE) * 24 * 60) || '분 전'
			         WHEN SYSDATE - BOARD_WRITE_DATE < 1
			         THEN FLOOR( (SYSDATE - BOARD_WRITE_DATE) * 24) || '시간 전'
			         ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
			    END BOARD_WRITE_DATE,
		    ]]>
		    
			(SELECT COUNT(*) FROM "COMMENT" C
			 WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
			(SELECT COUNT(*) FROM "BOARD_LIKE" L
			 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
			(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
			 WHERE I.BOARD_NO = B.BOARD_NO
			 AND IMG_ORDER = 0) THUMBNAIL      
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		<choose>
			<!--제목검색-->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			<!--내용검색-->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			<!--제목+내용-->
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
			<!--작성자검색-->
			<when test='key == "w"'>
				AND MEMBER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>
		ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 게시글 상세 조회 -->
	<select id="boardDetail" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, READ_COUNT ,
         	TO_CHAR(BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_WRITE_DATE,
         	TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_UPDATE_DATE,
         	MEMBER_NICKNAME, PROFILE_IMG , MEMBER_NO ,
         	(SELECT COUNT(*) FROM "BOARD_LIKE" BL WHERE BL.BOARD_NO = B.BOARD_NO) LIKE_COUNT
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_NO = #{boardNo} AND BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
	</select>
	
	<!-- 특정 게시글 댓글 목록 조회 -->
	<select id="selectCommentList" resultType="Comment">
		SELECT LEVEL, C.* FROM
     		(SELECT COMMENT_NO, COMMENT_CONTENT,
         	TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_WRITE_DATE,
     		BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_NO, COMMENT_DEL_FL
		FROM "COMMENT" JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO = #{boardNo}) C
		WHERE COMMENT_DEL_FL = 'N'
		START WITH PARENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_NO
		ORDER SIBLINGS BY COMMENT_NO
	</select>

	<!-- 게시글 좋아요 여부 확인 -->	
	<select id="likeCheck" resultType="_int">
		SELECT COUNT(*) FROM "BOARD_LIKE"
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 좋아요 테이블 행 삭제 -->
	<delete id="deleteBoardLike">
		DELETE FROM "BOARD_LIKE"
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</delete>
	
	<!-- 좋아요 테이블 행 삽입 -->
	<insert id="insertBoardLike">
		INSERT INTO "BOARD_LIKE"
		VALUES(${memberNo}, ${boardNo})
	</insert>
	
	<!-- 좋아요 수 조회 -->
	<select id="countBoardLike" resultType="_int">
		SELECT COUNT(*) FROM "BOARD_LIKE"
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<update id="updateReadCount">
		UPDATE "BOARD" SET
		READ_COUNT = READ_COUNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	<!-- 특정 게시글 이미지 조회 -->
	<select id="selectImageList" resultType="BoardImg">
		SELECT * FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER
	</select>
</mapper>